<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.ync.mapper.UserMapper">

	<resultMap type="kr.ync.domain.UserVO" id="userMap">
		<id property="id" column="id" />
		<result property="id" column="id" />
		<result property="pass" column="pass" />
		<result property="name" column="name" />
		<result property="email" column="email" />
		<collection property="auth" resultMap="authMap">
		</collection>
	</resultMap>

	<resultMap type="kr.ync.domain.AuthVO" id="authMap">
		<result property="id" column="id" />
		<result property="auth" column="auth" />
	</resultMap>

	<!-- member_auth table은 사용 하지 않고 AuthVO만 사용한다. tbl_member 의 autho 컬럼 정보만 
		따로 담아는 객차이다. Spring Security의 기본 사용법과 다르게 tbl_member에 권한 컴럼(auth)을 넣어서 사용하기에 
		기본 사용법과 달라진다. -->
	<select id="read" resultMap="userMap">
		SELECT id,
		pass,
		name,
		email,
		auth
		FROM member
		WHERE id = #{id}
	</select>

	<insert id="insert">
		INSERT INTO member (id, pass, name, email)
		VALUES
		( #{id}, #{pass}, #{name}, #{email})
	</insert>
	
	 <update id="pass_update">
		update member
		set 
		pass = #{pass}
		where id = #{id}
	</update>
	
	
	<select id="checkOverId" parameterType="String" resultType="int">
		select count(*) from member where id = #{id}
	</select>
	
	<select id="checkOverName" parameterType="String" resultType="int">
		select count(*) from member where name = #{name}
	</select>
	
	<select id="checkOverEmail" parameterType="String" resultType="int">
		select count(*) from member where email = #{email}
	</select>
	
	<!--  
	<update id="getKey" parameterType="Map">
		update member set user_key = #{param2} where id = #{param1}
	</update>
	
	<update id="alter_userKey" parameterType="Map">
		update member set user_key = 'Y' where id = #{param1} and user_key = #{param2}
	</update>
	
	-->
	<update id="getKey" parameterType="Map">
		update member set auth = #{param2} where id = #{param1}
	</update>
	
	<update id="alter_userKey" parameterType="Map">
		update member set auth = 'ROLE_USER' where id = #{param1} and auth = #{param2}
	</update>
	
	<select id="searchId" parameterType="Map" resultType="String">
		select id from member where name = #{param1} and email = #{param2}
	</select>
	
	<select id="find_checkId" parameterType="String" resultType="int">
		select count(*) from member where name = #{param1} and email = #{param2}
	</select>
	
	<select id="id_userInfo" resultType="kr.ync.domain.UserVO">
		select name from member where name = #{name}
	</select>
	
	<update id="searchPassword" parameterType="Map">
		update member set pass = #{param3} where id = #{param1} and email = #{param2} 
	</update>
	
	<select id="find_checkPass" parameterType="String" resultType="int">
		select count(*) from member where id = #{param1} and email = #{param2}
	</select>
	
	<select id="pw_userInfo" resultType="kr.ync.domain.UserVO">
		select id from member where id = #{id}
	</select>
	
	<select id="auth_check" parameterType="String" resultType="String">
		select auth from member where id = #{id}
	</select>
	

</mapper>
